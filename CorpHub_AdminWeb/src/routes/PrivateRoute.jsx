import { Navigate, Outlet } from "react-router-dom";
import { useSelector } from "react-redux";
import { jwtDecode } from "jwt-decode";

const PrivateRoute = ({ children, roles }) => {
  const { accessToken, user } = useSelector((state) => state.auth);

  const isTokenExpired = (token) => {
    try {
      const decoded = jwtDecode(token);
      return decoded.exp * 1000 < Date.now();
    } catch {
      return true;
    }
  };

  // üîí N·∫øu kh√¥ng c√≥ token ho·∫∑c token h·∫øt h·∫°n ‚Üí v·ªÅ login
  if (!accessToken || isTokenExpired(accessToken)) {
    return <Navigate to="/login" replace />;
  }

  // ‚è≥ N·∫øu c·∫ßn roles m√† user ch∆∞a load
  if (roles && !user) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <p className="text-gray-500 dark:text-gray-300">ƒêang t·∫£i th√¥ng tin ng∆∞·ªùi d√πng...</p>
      </div>
    );
  }

  // ‚ùå Sai quy·ªÅn
  if (roles && user && !roles.includes(user.role)) {
    return <Navigate to="/unauthorized" replace />;
  }

  // ‚úÖ OK
  return children || <Outlet />;
};

export default PrivateRoute;
