import { useDispatch, useSelector } from "react-redux";
import {
    fetchRoomRequirements,
    approveRoomRequirement,
    rejectRoomRequirement,
    setSelectedRequirement,
    clearSelectedRequirement,
    fetchSuitableRooms,
} from "../store/roomRequirementSlice";
import { useCallback, useEffect } from "react";
import { showSuccess, showError } from "../../../utils/toastUtils";

export function useRoomRequirement(autoFetch = true) {
    const dispatch = useDispatch();

    // ‚úÖ L·∫•y state m·ªõi c√≥ th√™m loadingSuitable
    const {
        items,
        suitableRooms,
        loading,
        loadingSuitable,
        error,
        selected,
        meta,
    } = useSelector((state) => state.roomRequirements);

    /* -------------------- LOAD DANH S√ÅCH -------------------- */
    const refresh = useCallback(
        (page = meta?.page || 0, size = meta?.size || 9) => {
            dispatch(fetchRoomRequirements({ page, size }));
        },
        [dispatch, meta?.page, meta?.size]
    );

    useEffect(() => {
        if (autoFetch) refresh();
    }, [autoFetch, refresh]);

    /* -------------------- H√ÄNH ƒê·ªòNG -------------------- */
    const approve = useCallback(
        async (id, roomId) => {
            try {
                const res = await dispatch(approveRoomRequirement({ id, roomId })).unwrap();
                console.log(res.data);
                if (res?.data === true)
                    showSuccess("ƒê√£ ph√™ duy·ªát y√™u c·∫ßu ph√≤ng");
                else
                    showError("Ph√™ duy·ªát th·∫•t b·∫°i");
                refresh();
            } catch (err) {
                showError("Ph√™ duy·ªát th·∫•t b·∫°i");
                console.error(err);
            }
        },
        [dispatch, refresh]
    );

    const reject = useCallback(
        async (id) => {
            try {
                const res = await dispatch(rejectRoomRequirement(id)).unwrap();
                if (res?.data?.success === true)
                    showSuccess("ƒê√£ t·ª´ ch·ªëi y√™u c·∫ßu ph√≤ng");
                else
                    showError("T·ª´ ch·ªëi th·∫•t b·∫°i");
                refresh();
            } catch (err) {
                showError("T·ª´ ch·ªëi th·∫•t b·∫°i");
                console.error(err);
            }
        },
        [dispatch, refresh]
    );

    /* -------------------- SELECTED ITEM -------------------- */
    const setSelected = useCallback(
        (req) => {
            dispatch(setSelectedRequirement(req));
        },
        [dispatch]
    );

    const clearSelected = useCallback(() => {
        dispatch(clearSelectedRequirement());
    }, [dispatch]);

    /* -------------------- LOAD PH√íNG PH√ô H·ª¢P -------------------- */
    const loadSuitableRooms = useCallback(
        async (id) => {
            if (!id) return;
            try {
                await dispatch(fetchSuitableRooms(id)).unwrap();
            } catch (err) {
                console.error("‚ùå L·ªói khi t·∫£i danh s√°ch ph√≤ng ph√π h·ª£p:", err);
            }
        },
        [dispatch]
    );

    /* -------------------- TR·∫¢ V·ªÄ -------------------- */
    return {
        // d·ªØ li·ªáu
        requirements: items,
        suitableRooms,
        meta,
        // tr·∫°ng th√°i
        loading,            // loading danh s√°ch y√™u c·∫ßu
        loadingSuitable,    // üÜï loading ph√≤ng ph√π h·ª£p (cho modal)
        error,
        selected,
        // h√†nh ƒë·ªông
        refresh,
        loadSuitableRooms,
        approve,
        reject,
        setSelected,
        clearSelected,
    };
}
